{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/Project_3_group4-best-group-btw-/src/gameroom/chessboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Chess from \"chess.js\"; // import Chess from  \"chess.js\"(default) if recieving an error about new Chess() not being a constructor\n\nimport Chessboard from \"chessboardjsx\";\nimport './chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BlindChess({\n  user_data,\n  socket,\n  user_name\n}) {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [gameFen, setFen] = useState(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\");\n  const [history, setHistory] = useState([]);\n  const inputRef = useRef(null);\n\n  function onClickButton() {\n    if (inputRef != null && inputRef.current.value != \"\") {\n      const userName = inputRef.current.value;\n      setUsername(prev => userName);\n    }\n  }\n\n  useEffect(() => {\n    socket.on(\"move\", data => {\n      setFen(data.FEN);\n      setHistory(data.history);\n    });\n  }, []); // Image options\n\n  const factor = 0.75;\n  var WhiteImage = \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/48/face-with-tears-of-joy_1f602.png\";\n  var BlackImage = \"http://cdn.shopify.com/s/files/1/1061/1924/products/Loudly_Crying_Face_Emoji_grande.png?v=1571606037\";\n\n  const optionWhite = ({\n    squareWidth,\n    isDragging\n  }) => /*#__PURE__*/_jsxDEV(\"img\", {\n    style: {\n      width: isDragging ? squareWidth * factor : squareWidth,\n      height: isDragging ? squareWidth * factor : squareWidth\n    },\n    src: WhiteImage,\n    alt: \"whitepieces\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 11\n  }, this);\n\n  const optionBlack = ({\n    squareWidth,\n    isDragging\n  }) => /*#__PURE__*/_jsxDEV(\"img\", {\n    style: {\n      width: isDragging ? squareWidth * factor : squareWidth,\n      height: isDragging ? squareWidth * factor : squareWidth\n    },\n    src: BlackImage,\n    alt: \"blackpieces\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 11\n  }, this);\n\n  const onDrop = ({\n    sourceSquare,\n    targetSquare\n  }) => {\n    if (sourceSquare === targetSquare) {\n      return;\n    } //console.log(\"User_data \" , user_data);\n\n\n    if (user_data.Black !== user_name && user_data.White !== user_name) {\n      return;\n    } //console.log(sourceSquare, targetSquare);\n\n\n    const game = new Chess(gameFen); // see if the move is legal\n\n    if (game.in_checkmate()) {\n      return;\n    }\n\n    const turn = game.fen() === \"start\" || game.fen().search(/w/) !== -1 ? \"White\" : \"Black\";\n\n    if (user_name === user_data.White && turn != \"White\") {\n      return;\n    }\n\n    if (user_name === user_data.Black && turn != \"Black\") {\n      return;\n    }\n\n    let move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\" // always promote to a queen for example simplicity\n\n    }); // illegal move\n\n    if (move === null) {\n      alert(\"You lose due to illegal move\", sourceSquare, targetSquare);\n      console.log(\"illegal move\");\n      return;\n    }\n\n    ; //console.log(game.pgn().replace(\"[SetUp \\\"1\\\"]\" , \"\").replace(/\\s*\\[.*?\\]\\s*/g, ''));\n\n    let move_string = game.pgn().replace(\"[SetUp \\\"1\\\"]\", \"\").replace(/\\s*\\[.*?\\]\\s*/g, '');\n\n    if (move_string.includes(\"...\")) {\n      //console.log(move_string.split(\"...\")[1]);\n      move_string = move_string.split(\"...\")[1];\n    } else {\n      //console.log(move_string);\n      move_string = move_string.split('. ')[1];\n    }\n\n    const newFen = game.fen();\n    const newHistory = history.concat(move_string);\n    const data = {\n      FEN: newFen,\n      history: newHistory\n    };\n    socket.emit('move', data); //console.log(\"New History\", newHistory);\n\n    setFen(prev => newFen);\n    setHistory(prev => newHistory);\n  };\n\n  function chessInfo() {\n    const game = new Chess(gameFen); //console.log(game);\n    // console.log(user_data);\n    //console.log(\"history\", history);\n\n    let temp_history = history;\n    let list_moves = Array(0);\n\n    for (var i = 0; i < temp_history.length; i += 2) {\n      list_moves.push([temp_history[i], temp_history[i + 1]]);\n    } //console.log(\"list_moves\", list_moves);\n\n\n    console.log(game.in_checkmate());\n    let GameInfo = \"\";\n    const turn = game.fen() === \"start\" || game.fen().search(/w/) !== -1 ? \"White\" : \"Black\";\n\n    if (game.in_checkmate()) {\n      if (turn == \"Black\") {\n        GameInfo = \"White won by checkmate\";\n      } else {\n        GameInfo = \"Black won by checkmate\";\n      }\n    } else if (game.in_draw() || game.in_stalemate() || game.in_threefold_repetition()) {\n      GameInfo = \"Draw by stalemate\";\n    } else if (game.insufficient_material()) {\n      GameInfo = \"Draw by insufficient material\";\n    } else {\n      GameInfo = turn + \" to Play\";\n    }\n\n    let Role = \"\";\n\n    if (user_name === user_data.White) {\n      Role = \"White\";\n    } else if (user_name === user_data.Black) {\n      Role = \"Black\";\n    } else {\n      Role = \"Spectator\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", GameInfo, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", user_name, \" (You) are playing as \", Role]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: [\" \", list_moves.map(move => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: move\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 38\n        }, this)), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }\n\n  function resign() {\n    if (Chess(gameFen).game_over()) {\n      return;\n    }\n\n    if (user_name == user_data.White) {\n      setFen(\"rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3\");\n      const data = {\n        FEN: \"rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3\",\n        history: []\n      };\n      socket.emit('move', data);\n    } else if (user_name == user_data.Black) {\n      setFen(\"rnbqkbnr/ppppp2p/8/5ppQ/4P3/P7/1PPP1PPP/RNB1KBNR b KQkq - 1 3\");\n      const data = {\n        FEN: \"rnbqkbnr/ppppp2p/8/5ppQ/4P3/P7/1PPP1PPP/RNB1KBNR b KQkq - 1 3\",\n        history: []\n      };\n      socket.emit('move', data);\n    } else {\n      return;\n    }\n  }\n\n  function replay() {\n    if (!(user_data.Black == user_name || user_data.White == user_name)) {\n      return;\n    }\n\n    setFen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\");\n    setHistory([]);\n    const data = {\n      FEN: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n      history: []\n    };\n    socket.emit('move', data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ChessBoard\",\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"chessBoard\",\n      width: 640,\n      position: gameFen,\n      onDrop: onDrop,\n      boardStyle: {\n        borderRadius: \"5px\",\n        boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n      },\n      pieces: {\n        wK: optionWhite,\n        wQ: optionWhite,\n        wN: optionWhite,\n        wR: optionWhite,\n        wB: optionWhite,\n        wP: optionWhite,\n        bK: optionBlack,\n        bQ: optionBlack,\n        bN: optionBlack,\n        bR: optionBlack,\n        bB: optionBlack,\n        bP: optionBlack\n      },\n      orientation: user_name === user_data.Black ? \"Black\" : \"White\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }, this), chessInfo(), user_data.Black == user_name || user_data.White == user_name ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => resign(),\n      children: \"Resign \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 69\n    }, this) : null, Chess(gameFen).in_checkmate() && user_data.Black == user_name || user_data.White == user_name ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => replay(),\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 102\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 11\n  }, this);\n}\n\n_s(BlindChess, \"L6p1uWNDnMb/Rb6M+q6eLowL9lk=\");\n\n_c = BlindChess;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlindChess\");","map":{"version":3,"sources":["/home/ec2-user/environment/Project_3_group4-best-group-btw-/src/gameroom/chessboard.js"],"names":["React","useState","useRef","useEffect","Chess","Chessboard","BlindChess","user_data","socket","user_name","username","setUsername","gameFen","setFen","history","setHistory","inputRef","onClickButton","current","value","userName","prev","on","data","FEN","factor","WhiteImage","BlackImage","optionWhite","squareWidth","isDragging","width","height","optionBlack","onDrop","sourceSquare","targetSquare","Black","White","game","in_checkmate","turn","fen","search","move","from","to","promotion","alert","console","log","move_string","pgn","replace","includes","split","newFen","newHistory","concat","emit","chessInfo","temp_history","list_moves","Array","i","length","push","GameInfo","in_draw","in_stalemate","in_threefold_repetition","insufficient_material","Role","map","resign","game_over","replay","borderRadius","boxShadow","wK","wQ","wN","wR","wB","wP","bK","bQ","bN","bR","bB","bP"],"mappings":"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","sourcesContent":["import React, { useState,  useRef, useEffect } from \"react\";\nimport Chess  from \"chess.js\"; // import Chess from  \"chess.js\"(default) if recieving an error about new Chess() not being a constructor\nimport Chessboard from \"chessboardjsx\";\nimport './chessboard.css';\n\nexport default function BlindChess({user_data, socket, user_name}) {\n  const [username, setUsername] = useState(\"\");\n  const [gameFen, setFen] = useState(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\");\n  const [history, setHistory] = useState([]);\n  \n  const inputRef = useRef(null);\n\n  function onClickButton() {\n    if (inputRef != null && inputRef.current.value != \"\") {\n      const userName = inputRef.current.value;\n      setUsername(prev => userName);\n    }\n  }\n  \n  \n  useEffect(() => {\n    socket.on(\"move\", (data) => {\n      \n      setFen(data.FEN);\n      setHistory(data.history);\n    });\n  }, []);\n  // Image options\n  const factor = 0.75;\n  var WhiteImage = \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/48/face-with-tears-of-joy_1f602.png\";\n  var BlackImage = \"http://cdn.shopify.com/s/files/1/1061/1924/products/Loudly_Crying_Face_Emoji_grande.png?v=1571606037\";\n  const optionWhite = ({ squareWidth, isDragging }) => (\n          <img\n            style={{\n              width: isDragging ? squareWidth * factor : squareWidth,\n              height: isDragging ? squareWidth * factor : squareWidth\n            }}\n            src={WhiteImage}\n            alt={\"whitepieces\"}\n          />\n        )\n        \n  const optionBlack =  ({ squareWidth, isDragging }) => (\n          <img\n            style={{\n              width: isDragging ? squareWidth * factor : squareWidth,\n              height: isDragging ? squareWidth * factor : squareWidth\n            }}\n            src={BlackImage}\n            alt={\"blackpieces\"}\n          />\n        )\n\n  const onDrop = ({ sourceSquare, targetSquare }) => {\n    if (sourceSquare === targetSquare) {\n      return;\n    }\n    //console.log(\"User_data \" , user_data);\n    \n    if (user_data.Black !== user_name && user_data.White !== user_name) {\n      return;\n    }\n    \n    //console.log(sourceSquare, targetSquare);\n    const game = new Chess(gameFen);\n    // see if the move is legal\n    \n    if (game.in_checkmate()) {\n      return;\n    }\n    \n    const turn = game.fen() === \"start\" || game.fen().search(/w/) !== -1 ? \"White\": \"Black\";\n    \n    if (user_name === user_data.White && turn != \"White\") {\n      return;\n    }\n    if (user_name === user_data.Black && turn != \"Black\") {\n      return;\n    }\n    \n    let move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\" // always promote to a queen for example simplicity\n    });\n    \n    \n    // illegal move\n    if (move === null) {\n      alert(\"You lose due to illegal move\", sourceSquare, targetSquare);\n      console.log(\"illegal move\");\n      return;\n    };\n    \n    \n    \n    //console.log(game.pgn().replace(\"[SetUp \\\"1\\\"]\" , \"\").replace(/\\s*\\[.*?\\]\\s*/g, ''));\n    let move_string = game.pgn().replace(\"[SetUp \\\"1\\\"]\" , \"\").replace(/\\s*\\[.*?\\]\\s*/g, '');\n    \n    if (move_string.includes(\"...\")) {\n      //console.log(move_string.split(\"...\")[1]);\n     move_string= move_string.split(\"...\")[1];\n    }\n    else {\n      //console.log(move_string);\n      move_string = move_string.split('. ')[1];\n    }\n    \n    const newFen = game.fen();\n    const newHistory = history.concat(move_string);\n        \n    const data = { FEN: newFen, history: newHistory};\n    \n    socket.emit('move', data);\n    \n    \n    //console.log(\"New History\", newHistory);\n    setFen((prev) => newFen);\n    setHistory(prev => newHistory);\n  };\n\n\n  function chessInfo() {\n    const game = new Chess(gameFen);\n    //console.log(game);\n    // console.log(user_data);\n    //console.log(\"history\", history);\n    let temp_history = history;\n    \n    let list_moves = Array(0);\n    for (var i =0; i< temp_history.length; i+=2) {\n      list_moves.push([temp_history[i], temp_history[i+1]]);\n    }\n    \n    \n    //console.log(\"list_moves\", list_moves);\n    console.log(game.in_checkmate());\n    let GameInfo = \"\";\n    const turn = game.fen() === \"start\" || game.fen().search(/w/) !== -1 ? \"White\": \"Black\";\n    \n    if (game.in_checkmate()) {\n      if (turn == \"Black\") {\n        GameInfo=\"White won by checkmate\";\n      }\n      else {\n        GameInfo=\"Black won by checkmate\";\n      }\n    }\n    else if (game.in_draw() || game.in_stalemate() || game.in_threefold_repetition()) {\n      GameInfo=\"Draw by stalemate\";\n    }\n    else if (game.insufficient_material()) {\n      GameInfo=\"Draw by insufficient material\";\n    }\n    else {\n      GameInfo=turn + \" to Play\";\n    }\n    \n    let Role=\"\";\n    \n    if (user_name === user_data.White ) {\n      Role = \"White\";\n    }\n    else if (user_name === user_data.Black ) {\n      Role = \"Black\";\n    }\n    else {\n      Role = \"Spectator\";\n    }\n    \n    \n    \n    \n    return (<div className=\"chessInfo\">\n      <h1> {GameInfo} </h1>\n      <h1> {user_name} (You) are playing as {Role}</h1>\n      <ol> {list_moves.map((move) => <li>{move}</li>)} </ol>\n      \n      </div>\n    )\n  }\n  \n  function resign() {\n    if (Chess(gameFen).game_over()) {\n      return;\n    }\n    \n    \n    if (user_name == user_data.White) {\n      setFen(\"rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3\");\n      const data = { FEN: \"rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3\" , history: []};\n      socket.emit('move', data);\n    }\n    else if (user_name == user_data.Black) {\n      setFen(\"rnbqkbnr/ppppp2p/8/5ppQ/4P3/P7/1PPP1PPP/RNB1KBNR b KQkq - 1 3\");\n      const data = { FEN: \"rnbqkbnr/ppppp2p/8/5ppQ/4P3/P7/1PPP1PPP/RNB1KBNR b KQkq - 1 3\" , history: []};\n     socket.emit('move', data);\n    }\n    else {\n      return;\n    }\n  }\n  \n  function replay() {\n    \n    if (!(user_data.Black == user_name || user_data.White == user_name)) {\n      return;\n    }\n    setFen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\");\n    setHistory([]); \n    const data = { FEN: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\" , history: []};\n    socket.emit('move', data);\n  }\n  \n\n  \n  \n  return (<div className=\"ChessBoard\">\n    <Chessboard\n      id=\"chessBoard\"\n      width={640}\n      position={gameFen}\n      onDrop={onDrop}\n      boardStyle={{\n        borderRadius: \"5px\",\n        boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n      }}\n      pieces={{\n        wK: optionWhite,\n        wQ: optionWhite,\n        wN: optionWhite,\n        wR: optionWhite,\n        wB: optionWhite,\n        wP: optionWhite,\n        bK: optionBlack,\n        bQ: optionBlack,\n        bN: optionBlack,\n        bR: optionBlack,\n        bB: optionBlack,\n        bP: optionBlack\n      }}\n      orientation={user_name === user_data.Black ? \"Black\" : \"White\"}\n    />\n    \n    {chessInfo()}\n    {user_data.Black == user_name || user_data.White == user_name ? <button onClick={() => resign()}>Resign </button> : null}\n    {Chess(gameFen).in_checkmate() && user_data.Black == user_name || user_data.White == user_name ? <button onClick={() => replay()}>Play Again</button> : \"\"}\n    \n    <br/>\n\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}