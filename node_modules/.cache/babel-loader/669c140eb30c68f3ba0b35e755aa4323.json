{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/Project_3_group4-best-group-btw-/src/chessboard.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chess from \"chess.js\"; // import Chess from  \"chess.js\"(default) if recieving an error about new Chess() not being a constructor\n\nimport Chessboard from \"chessboardjsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ChessGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fen: \"start\",\n      pieceSquare: \"\",\n      square: \"\",\n      history: []\n    };\n\n    this.onDrop = ({\n      sourceSquare,\n      targetSquare\n    }) => {\n      if (sourceSquare === targetSquare) {\n        return;\n      } // see if the move is legal\n\n\n      let move = this.game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\" // always promote to a queen for example simplicity\n\n      }); // illegal move\n\n      if (move === null) {\n        alert(\"You lose due to illegal move\");\n        return;\n      }\n\n      ;\n      this.setState(({\n        history,\n        pieceSquare\n      }) => ({\n        fen: this.game.fen(),\n        history: this.game.history({\n          verbose: false\n        })\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.game = new Chess();\n  }\n\n  render() {\n    const {\n      fen\n    } = this.state;\n    const his = this.state.history;\n    console.log(his);\n    return this.props.children({\n      position: fen,\n      onMouseOverSquare: this.onMouseOverSquare,\n      onMouseOutSquare: this.onMouseOutSquare,\n      onDrop: this.onDrop,\n      PGN: his\n    });\n  }\n\n}\n\nChessGame.propTypes = {\n  children: PropTypes.func\n};\nconst factor = 0.75;\nvar WhiteImage = \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/48/face-with-tears-of-joy_1f602.png\";\nvar BlackImage = \"http://cdn.shopify.com/s/files/1/1061/1924/products/Loudly_Crying_Face_Emoji_grande.png?v=1571606037\";\n\nconst optionWhite = ({\n  squareWidth,\n  isDragging\n}) => /*#__PURE__*/_jsxDEV(\"img\", {\n  style: {\n    width: isDragging ? squareWidth * factor : squareWidth,\n    height: isDragging ? squareWidth * factor : squareWidth\n  },\n  src: WhiteImage,\n  alt: \"whitepieces\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 73,\n  columnNumber: 11\n}, this);\n\nconst optionBlack = ({\n  squareWidth,\n  isDragging\n}) => /*#__PURE__*/_jsxDEV(\"img\", {\n  style: {\n    width: isDragging ? squareWidth * factor : squareWidth,\n    height: isDragging ? squareWidth * factor : squareWidth\n  },\n  src: BlackImage,\n  alt: \"blackpieces\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 84,\n  columnNumber: 11\n}, this);\n\nfunction game_is_over(curr_pos) {\n  let temp = new Chess();\n  temp.load(curr_pos);\n  console.log(temp.game_over());\n\n  if (temp.game_over()) {\n    return \"Game is Over\";\n  } else {\n    return \"Keep Playing\";\n  }\n}\n\nfunction history_of_moves(moves) {\n  console.log(moves);\n  return moves;\n}\n\nexport default function BlindChess() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ChessGame, {\n      children: ({\n        position,\n        moves,\n        onDrop,\n        onMouseOverSquare,\n        onMouseOutSquare,\n        dropSquareStyle,\n        PGN\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n          id: \"humanVsHuman\",\n          width: 640,\n          position: position,\n          onDrop: onDrop,\n          onMouseOverSquare: onMouseOverSquare,\n          onMouseOutSquare: onMouseOutSquare,\n          boardStyle: {\n            borderRadius: \"5px\",\n            boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n          },\n          dropSquareStyle: dropSquareStyle,\n          pieces: {\n            wK: optionWhite,\n            wQ: optionWhite,\n            wN: optionWhite,\n            wR: optionWhite,\n            wB: optionWhite,\n            wP: optionWhite,\n            bK: optionBlack,\n            bQ: optionBlack,\n            bN: optionBlack,\n            bR: optionBlack,\n            bB: optionBlack,\n            bP: optionBlack\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Chess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: position === \"start\" || position.search(/w/) !== -1 ? \"White to Play\" : \"Black to Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: game_is_over(position)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: PGN.map(move => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: move\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 31\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_c = BlindChess;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlindChess\");","map":{"version":3,"sources":["/home/ec2-user/environment/Project_3_group4-best-group-btw-/src/chessboard.js"],"names":["React","Component","PropTypes","Chess","Chessboard","ChessGame","state","fen","pieceSquare","square","history","onDrop","sourceSquare","targetSquare","move","game","from","to","promotion","alert","setState","verbose","componentDidMount","render","his","console","log","props","children","position","onMouseOverSquare","onMouseOutSquare","PGN","propTypes","func","factor","WhiteImage","BlackImage","optionWhite","squareWidth","isDragging","width","height","optionBlack","game_is_over","curr_pos","temp","load","game_over","history_of_moves","moves","BlindChess","dropSquareStyle","borderRadius","boxShadow","wK","wQ","wN","wR","wB","wP","bK","bQ","bN","bR","bB","bP","search","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAmB,UAAnB,C,CAA+B;;AAC/B,OAAOC,UAAP,MAAuB,eAAvB;;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAGhCK,KAHgC,GAGxB;AACNC,MAAAA,GAAG,EAAE,OADC;AAENC,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,MAAM,EAAE,EAHF;AAINC,MAAAA,OAAO,EAAE;AAJH,KAHwB;;AAAA,SAehCC,MAfgC,GAevB,CAAC;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,KAAoC;AAE3C,UAAID,YAAY,KAAKC,YAArB,EAAmC;AACjC;AACD,OAJ0C,CAM3C;;;AACA,UAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUD,IAAV,CAAe;AACxBE,QAAAA,IAAI,EAAEJ,YADkB;AAExBK,QAAAA,EAAE,EAAEJ,YAFoB;AAGxBK,QAAAA,SAAS,EAAE,GAHa,CAGT;;AAHS,OAAf,CAAX,CAP2C,CAa3C;;AACA,UAAIJ,IAAI,KAAK,IAAb,EAAmB;AACjBK,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACA;AACD;;AAAA;AAED,WAAKC,QAAL,CAAc,CAAC;AAAEV,QAAAA,OAAF;AAAWF,QAAAA;AAAX,OAAD,MAA+B;AAC3CD,QAAAA,GAAG,EAAE,KAAKQ,IAAL,CAAUR,GAAV,EADsC;AAE3CG,QAAAA,OAAO,EAAE,KAAKK,IAAL,CAAUL,OAAV,CAAkB;AAAEW,UAAAA,OAAO,EAAE;AAAX,SAAlB;AAFkC,OAA/B,CAAd;AAID,KAtC+B;AAAA;;AAUhCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKP,IAAL,GAAY,IAAIZ,KAAJ,EAAZ;AACD;;AA8BDoB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA;AAAF,QAAW,KAAKD,KAAtB;AAEA,UAAMkB,GAAG,GAAG,KAAKlB,KAAL,CAAWI,OAAvB;AAEAe,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEA,WAAO,KAAKG,KAAL,CAAWC,QAAX,CAAoB;AACzBC,MAAAA,QAAQ,EAAEtB,GADe;AAEzBuB,MAAAA,iBAAiB,EAAE,KAAKA,iBAFC;AAGzBC,MAAAA,gBAAgB,EAAE,KAAKA,gBAHE;AAIzBpB,MAAAA,MAAM,EAAE,KAAKA,MAJY;AAKzBqB,MAAAA,GAAG,EAAER;AALoB,KAApB,CAAP;AAOD;;AAxD+B;;AAA5BnB,S,CACG4B,S,GAAY;AAAEL,EAAAA,QAAQ,EAAE1B,SAAS,CAACgC;AAAtB,C;AA2DrB,MAAMC,MAAM,GAAG,IAAf;AAEA,IAAIC,UAAU,GAAG,iHAAjB;AACA,IAAIC,UAAU,GAAG,sGAAjB;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,kBACV;AACE,EAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAED,UAAU,GAAGD,WAAW,GAAGJ,MAAjB,GAA0BI,WADtC;AAELG,IAAAA,MAAM,EAAEF,UAAU,GAAGD,WAAW,GAAGJ,MAAjB,GAA0BI;AAFvC,GADT;AAKE,EAAA,GAAG,EAAEH,UALP;AAME,EAAA,GAAG,EAAE;AANP;AAAA;AAAA;AAAA;AAAA,QADV;;AAWA,MAAMO,WAAW,GAAI,CAAC;AAAEJ,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,kBACX;AACE,EAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAED,UAAU,GAAGD,WAAW,GAAGJ,MAAjB,GAA0BI,WADtC;AAELG,IAAAA,MAAM,EAAEF,UAAU,GAAGD,WAAW,GAAGJ,MAAjB,GAA0BI;AAFvC,GADT;AAKE,EAAA,GAAG,EAAEF,UALP;AAME,EAAA,GAAG,EAAE;AANP;AAAA;AAAA;AAAA;AAAA,QADV;;AAWA,SAASO,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,MAAIC,IAAI,GAAG,IAAI3C,KAAJ,EAAX;AACA2C,EAAAA,IAAI,CAACC,IAAL,CAAUF,QAAV;AACApB,EAAAA,OAAO,CAACC,GAAR,CAAYoB,IAAI,CAACE,SAAL,EAAZ;;AACA,MAAIF,IAAI,CAACE,SAAL,EAAJ,EAAsB;AACpB,WAAO,cAAP;AACD,GAFD,MAGK;AACH,WAAO,cAAP;AACD;AACF;;AAED,SAASC,gBAAT,CAA2BC,KAA3B,EAAkC;AAChCzB,EAAAA,OAAO,CAACC,GAAR,CAAYwB,KAAZ;AAEA,SAAOA,KAAP;AACD;;AAED,eAAe,SAASC,UAAT,GAAsB;AACnC,sBACE;AAAA,2BACA,QAAC,SAAD;AAAA,gBACK,CAAC;AACAtB,QAAAA,QADA;AAEAqB,QAAAA,KAFA;AAGAvC,QAAAA,MAHA;AAIAmB,QAAAA,iBAJA;AAKAC,QAAAA,gBALA;AAMAqB,QAAAA,eANA;AAOApB,QAAAA;AAPA,OAAD,kBASD;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,EAAE,EAAC,cADL;AAEE,UAAA,KAAK,EAAE,GAFT;AAGE,UAAA,QAAQ,EAAEH,QAHZ;AAIE,UAAA,MAAM,EAAElB,MAJV;AAKE,UAAA,iBAAiB,EAAEmB,iBALrB;AAME,UAAA,gBAAgB,EAAEC,gBANpB;AAOE,UAAA,UAAU,EAAE;AACVsB,YAAAA,YAAY,EAAE,KADJ;AAEVC,YAAAA,SAAS,EAAG;AAFF,WAPd;AAWE,UAAA,eAAe,EAAEF,eAXnB;AAYE,UAAA,MAAM,EAAE;AACNG,YAAAA,EAAE,EAAEjB,WADE;AAENkB,YAAAA,EAAE,EAAElB,WAFE;AAGNmB,YAAAA,EAAE,EAAEnB,WAHE;AAINoB,YAAAA,EAAE,EAAEpB,WAJE;AAKNqB,YAAAA,EAAE,EAAErB,WALE;AAMNsB,YAAAA,EAAE,EAAEtB,WANE;AAONuB,YAAAA,EAAE,EAAElB,WAPE;AAQNmB,YAAAA,EAAE,EAAEnB,WARE;AASNoB,YAAAA,EAAE,EAAEpB,WATE;AAUNqB,YAAAA,EAAE,EAAErB,WAVE;AAWNsB,YAAAA,EAAE,EAAEtB,WAXE;AAYNuB,YAAAA,EAAE,EAAEvB;AAZE;AAZV;AAAA;AAAA;AAAA;AAAA,gBADF,eA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7BF,eAgCE;AAAA,oBACCd,QAAQ,KAAK,OAAb,IAAwBA,QAAQ,CAACsC,MAAT,CAAgB,GAAhB,MAAyB,CAAC,CAAlD,GAAsD,eAAtD,GAAuE;AADxE;AAAA;AAAA;AAAA;AAAA,gBAhCF,eAqCE;AAAA,oBACEvB,YAAY,CAACf,QAAD;AADd;AAAA;AAAA;AAAA;AAAA,gBArCF,eA0CE;AAAA,oBACEG,GAAG,CAACoC,GAAJ,CAAStD,IAAD,iBAAU;AAAA,sBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,kBAAlB;AADF;AAAA;AAAA;AAAA;AAAA,gBA1CF;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAgED;KAjEuBqC,U","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chess  from \"chess.js\"; // import Chess from  \"chess.js\"(default) if recieving an error about new Chess() not being a constructor\nimport Chessboard from \"chessboardjsx\";\n\nclass ChessGame extends Component {\n  static propTypes = { children: PropTypes.func };\n\n  state = {\n    fen: \"start\",\n    pieceSquare: \"\",\n    square: \"\",\n    history: []\n  };\n\n  componentDidMount() {\n    this.game = new Chess();\n  }\n\n\n  onDrop = ({ sourceSquare, targetSquare }) => {\n    \n    if (sourceSquare === targetSquare) {\n      return;\n    }\n    \n    // see if the move is legal\n    let move = this.game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\" // always promote to a queen for example simplicity\n    });\n\n    // illegal move\n    if (move === null) {\n      alert(\"You lose due to illegal move\");\n      return;\n    };\n    \n    this.setState(({ history, pieceSquare }) => ({\n      fen: this.game.fen(),\n      history: this.game.history({ verbose: false })\n    }));\n  };\n\n\n\n  render() {\n    const { fen }  = this.state;\n    \n    const his = this.state.history;\n    \n    console.log(his);\n    \n    return this.props.children({\n      position: fen,\n      onMouseOverSquare: this.onMouseOverSquare,\n      onMouseOutSquare: this.onMouseOutSquare,\n      onDrop: this.onDrop,\n      PGN: his\n    });\n  }\n}\n\n\nconst factor = 0.75;\n\nvar WhiteImage = \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/48/face-with-tears-of-joy_1f602.png\";\nvar BlackImage = \"http://cdn.shopify.com/s/files/1/1061/1924/products/Loudly_Crying_Face_Emoji_grande.png?v=1571606037\";\n\n\nconst optionWhite = ({ squareWidth, isDragging }) => (\n          <img\n            style={{\n              width: isDragging ? squareWidth * factor : squareWidth,\n              height: isDragging ? squareWidth * factor : squareWidth\n            }}\n            src={WhiteImage}\n            alt={\"whitepieces\"}\n          />\n        )\n        \nconst optionBlack =  ({ squareWidth, isDragging }) => (\n          <img\n            style={{\n              width: isDragging ? squareWidth * factor : squareWidth,\n              height: isDragging ? squareWidth * factor : squareWidth\n            }}\n            src={BlackImage}\n            alt={\"blackpieces\"}\n          />\n        )\n\nfunction game_is_over(curr_pos) {\n  let temp = new Chess();\n  temp.load(curr_pos)\n  console.log(temp.game_over());\n  if (temp.game_over()) {\n    return \"Game is Over\"\n  }\n  else {\n    return \"Keep Playing\"\n  }\n}\n\nfunction history_of_moves (moves) {\n  console.log(moves);\n  \n  return moves;\n}\n\nexport default function BlindChess() {\n  return (\n    <div>\n    <ChessGame>\n        {({\n          position,\n          moves,\n          onDrop,\n          onMouseOverSquare,\n          onMouseOutSquare,\n          dropSquareStyle,\n          PGN\n        }) => (\n        <div>\n          <Chessboard\n            id=\"humanVsHuman\"\n            width={640}\n            position={position}\n            onDrop={onDrop}\n            onMouseOverSquare={onMouseOverSquare}\n            onMouseOutSquare={onMouseOutSquare}\n            boardStyle={{\n              borderRadius: \"5px\",\n              boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n            }}\n            dropSquareStyle={dropSquareStyle}\n            pieces={{\n              wK: optionWhite,\n              wQ: optionWhite,\n              wN: optionWhite,\n              wR: optionWhite,\n              wB: optionWhite,\n              wP: optionWhite,\n              bK: optionBlack,\n              bQ: optionBlack,\n              bN: optionBlack,\n              bR: optionBlack,\n              bB: optionBlack,\n              bP: optionBlack\n            }}\n          />\n          \n          <h1>\n          Chess\n          </h1>\n          <h2>\n          {position === \"start\" || position.search(/w/) !== -1 ? \"White to Play\": \"Black to Play\"}\n          \n          </h2>\n          \n          <h3>\n          { game_is_over(position) }\n          \n          </h3>\n          \n          <ol>\n          { PGN.map((move) => <li>{move}</li>) } \n          \n          </ol>\n          \n          </div>\n        )}\n        </ChessGame>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}